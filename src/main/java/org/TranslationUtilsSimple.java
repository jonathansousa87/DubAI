package org;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Vers√£o ULTRA SIMPLIFICADA que apenas traduz - SEM DEPEND√äNCIAS EXTERNAS
 */
public class TranslationUtilsSimple {

    private static final Logger logger = Logger.getLogger(TranslationUtilsSimple.class.getName());
    
    // Modelo √∫nico otimizado
    private static final String[] AVAILABLE_MODELS = {
            "gemma3n:e4b"  // Modelo √∫nico para m√°xima velocidade
    };
    
    // Configura√ß√µes de timing PROFISSIONAIS para Piper TTS + dublagem
    private static final double CHARS_PER_SECOND_PT = 15.0; // Velocidade realista para portugu√™s brasileiro (15 chars/segundo)
    private static final double CHARS_PER_SECOND_FAST = 18.0; // Velocidade r√°pida mas compreens√≠vel para blocos curtos
    private static final double CHARS_PER_SECOND_SLOW = 12.0; // Velocidade lenta para blocos complexos
    private static final double TIMING_TOLERANCE = 1.3; // 130% - toler√¢ncia profissional para dublagem
    private static final double CRITICAL_TIMING_THRESHOLD = 2.0; // Blocos < 2s s√£o cr√≠ticos
    
    // Configura√ß√µes de RETRY e VALIDA√á√ÉO
    private static final int MAX_RETRY_ATTEMPTS = 2; // M√°ximo de tentativas para tradu√ß√µes incompletas
    private static final double MIN_COMPLETION_RATIO = 0.3; // 30% do tamanho original m√≠nimo para considerar completa
    private static final String[] INCOMPLETE_INDICATORS = {"\\\\$", "\\\\.\\.\\.$", "\\[\\.\\.\\.]$"}; // Indicadores de texto truncado
    
    private static final Pattern TIMESTAMP_PATTERN = Pattern.compile(
            "^(\\d{2}):(\\d{2})[.:,](\\d{3})\\s*-->\\s*(\\d{2}):(\\d{2})[.:,](\\d{3})$"
    );

    private static class SimpleVTTBlock {
        String timestamp;
        String originalText;
        String translatedText;
        double duration; // Dura√ß√£o em segundos
        double maxCharsForTiming; // M√°ximo de caracteres que cabem no timing

        SimpleVTTBlock(String timestamp, String text) {
            this.timestamp = timestamp;
            this.originalText = cleanText(text);
            this.duration = calculateDuration(timestamp);
            
            // C√°lculo adaptativo de caracteres baseado na dura√ß√£o
            double adaptiveCharsPerSecond = calculateAdaptiveCharsPerSecond(duration, text);
            this.maxCharsForTiming = duration * adaptiveCharsPerSecond * TIMING_TOLERANCE;
        }
        
        /**
         * Calcula velocidade adaptativa de caracteres baseada na dura√ß√£o e complexidade
         */
        private double calculateAdaptiveCharsPerSecond(double duration, String text) {
            // Para blocos muito curtos, permite velocidade ligeiramente maior
            if (duration < CRITICAL_TIMING_THRESHOLD) {
                return CHARS_PER_SECOND_FAST;
            }
            
            // Para blocos longos com conte√∫do complexo, usa velocidade menor
            if (duration > 8.0 && isComplexContent(text)) {
                return CHARS_PER_SECOND_SLOW;
            }
            
            return CHARS_PER_SECOND_PT;
        }
        
        /**
         * Detecta conte√∫do complexo que precisa de velocidade mais lenta
         */
        private boolean isComplexContent(String text) {
            if (text == null) return false;
            
            String lower = text.toLowerCase();
            
            // Conte√∫do t√©cnico ou educacional complexo
            return lower.matches(".*(algorithm|function|method|parameter|configuration|implementation).*") ||
                   lower.matches(".*(explanation|understand|important|remember|specifically).*") ||
                   text.length() > 200; // Textos muito longos
        }
        
        private double calculateDuration(String timestamp) {
            Matcher matcher = TIMESTAMP_PATTERN.matcher(timestamp);
            if (matcher.matches()) {
                try {
                    int startM = Integer.parseInt(matcher.group(1));
                    int startS = Integer.parseInt(matcher.group(2));
                    int startMs = Integer.parseInt(matcher.group(3));
                    
                    int endM = Integer.parseInt(matcher.group(4));
                    int endS = Integer.parseInt(matcher.group(5));
                    int endMs = Integer.parseInt(matcher.group(6));
                    
                    double start = startM * 60.0 + startS + startMs / 1000.0;
                    double end = endM * 60.0 + endS + endMs / 1000.0;
                    
                    return Math.max(0.1, end - start); // M√≠nimo de 0.1s
                } catch (Exception e) {
                    return 3.0; // Padr√£o: 3 segundos
                }
            }
            return 3.0;
        }
        
        boolean translationFitsInTiming(String translation) {
            if (translation == null) return false;
            return translation.length() <= maxCharsForTiming && 
                   validatePronunciationTiming(translation);
        }
        
        // VALIDA√á√ÉO DE PRONUNCIAMENTO PARA PIPER TTS
        private boolean validatePronunciationTiming(String translation) {
            if (translation == null) return false;
            
            // Contagem de s√≠labas aproximada para portugu√™s brasileiro
            int syllableCount = estimateSyllables(translation);
            
            // Tempo estimado para pronunciar (s√≠labas por segundo para PT-BR)
            double estimatedTime = syllableCount / 2.5; // 2.5 s√≠labas por segundo √© natural
            
            // Verifica se cabe no timing dispon√≠vel com toler√¢ncia
            return estimatedTime <= (duration * 1.1); // 110% de toler√¢ncia
        }
        
        private int estimateSyllables(String text) {
            if (text == null) return 0;
            
            // Remove pontua√ß√£o e n√∫meros
            String cleanText = text.toLowerCase()
                                 .replaceAll("[^aeiou√°√©√≠√≥√∫√¢√™√Æ√¥√ª√£√µ√†√®√¨√≤√π]", "")
                                 .replaceAll("\\s+", "");
            
            // Conta vogais (aproxima√ß√£o de s√≠labas em portugu√™s)
            int vowelCount = cleanText.length();
            
            // Ajustes para ditongos comuns em portugu√™s brasileiro
            vowelCount -= countOccurrences(cleanText, "ai");
            vowelCount -= countOccurrences(cleanText, "ei");
            vowelCount -= countOccurrences(cleanText, "oi");
            vowelCount -= countOccurrences(cleanText, "ui");
            vowelCount -= countOccurrences(cleanText, "au");
            vowelCount -= countOccurrences(cleanText, "eu");
            vowelCount -= countOccurrences(cleanText, "ou");
            
            return Math.max(1, vowelCount);
        }
        
        private int countOccurrences(String text, String pattern) {
            int count = 0;
            int index = 0;
            while ((index = text.indexOf(pattern, index)) != -1) {
                count++;
                index += pattern.length();
            }
            return count;
        }

        private String cleanText(String text) {
            if (text == null) return "";
            return text.replaceAll("\\[.*?\\]", "")
                      .replaceAll("\\(.*?\\)", "")
                      .replaceAll("<.*?>", "")
                      .replaceAll("\\s+", " ")
                      .trim();
        }

        boolean isEmpty() {
            return originalText == null || originalText.trim().isEmpty();
        }
    }
    
    /**
     * TRADUZ UM BLOCO COM ABORDAGEM SIMPLES E R√ÅPIDA - VERS√ÉO ANTI-TRAVAMENTO
     */
    public static String translateBlock(SimpleVTTBlock block) {
        long startTime = System.currentTimeMillis();
        String context = determineOptimalContext(block, null);
        logger.info(String.format("üéØ Contexto escolhido: %s para dura√ß√£o %.1fs", context, block.duration));
        
        // Para ultra_concise, tenta primeiro com fallback direto se muito curto
        if (context.equals("ultra_concise") && block.duration < 1.5) {
            logger.info("‚ö° Dura√ß√£o muito curta - usando tradu√ß√£o r√°pida direta");
            String quickTranslation = translateWithQuickFallback(block.originalText, block.duration);
            if (quickTranslation != null) {
                long elapsedTime = System.currentTimeMillis() - startTime;
                logger.info(String.format("‚úÖ Tradu√ß√£o r√°pida em %dms: %.50s...", elapsedTime, quickTranslation));
                return quickTranslation;
            }
        }
        
        String translation = translateWithOllamaAdvanced(block.originalText, "gemma3n:e4b", context, block.duration);
        
        // Se conseguiu tradu√ß√£o, retorna diretamente
        if (translation != null && !translation.trim().isEmpty()) {
            long elapsedTime = System.currentTimeMillis() - startTime;
            logger.info(String.format("‚úÖ Tradu√ß√£o bem-sucedida em %dms: %.50s...", elapsedTime, translation));
            return translation;
        } else {
            long elapsedTime = System.currentTimeMillis() - startTime;
            logger.warning(String.format("‚ùå Primeira tradu√ß√£o falhou ap√≥s %dms - tentando fallback robusto", elapsedTime));
        }
        
        // Fallback inteligente - tenta contextos menos complexos
        String[] fallbackContexts = {"concise", "normal"};
        for (String fallbackContext : fallbackContexts) {
            if (!fallbackContext.equals(context)) { // Evita repetir o mesmo contexto
                logger.info(String.format("üîÑ Tentando fallback com contexto: %s", fallbackContext));
                String fallback = translateWithOllamaAdvanced(block.originalText, "gemma3n:e4b", fallbackContext, block.duration);
                if (fallback != null && !fallback.trim().isEmpty()) {
                    logger.info(String.format("‚úÖ Fallback bem-sucedido (%s): %.50s...", fallbackContext, fallback));
                    return fallback;
                }
            }
        }
        
        // √öltimo recurso: tradu√ß√£o r√°pida simplificada
        logger.warning("‚ùå Todos os fallbacks falharam - usando tradu√ß√£o r√°pida de √∫ltimo recurso");
        String emergencyTranslation = translateWithQuickFallback(block.originalText, block.duration);
        if (emergencyTranslation != null) {
            logger.info(String.format("‚úÖ Tradu√ß√£o de emerg√™ncia: %.50s...", emergencyTranslation));
            return emergencyTranslation;
        }
        
        // Fracasso total - retorna texto original
        logger.warning("‚ùå Todos os m√©todos falharam - usando texto original");
        return block.originalText;
    }
    
    /**
     * TRADUZ BLOCO COM SISTEMA DE RETRY ROBUSTO
     */
    private static String translateBlockWithRetry(SimpleVTTBlock block, int maxAttempts) {
        String context = determineOptimalContext(block, null);
        
        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            logger.info(String.format("üîÑ Tentativa %d/%d - Bloco: %.60s...", 
                attempt, maxAttempts, block.originalText));
                
            String translation = translateWithOllamaAdvanced(block.originalText, "gemma3n:e4b", context, block.duration);
            
            if (translation != null) {
                // Valida completude da tradu√ß√£o
                TranslationValidation validation = validateTranslationCompleteness(block.originalText, translation);
                
                if (validation.isValid()) {
                    if (isTranslationValid(translation, block)) {
                        logger.info(String.format("‚úÖ Tradu√ß√£o v√°lida na tentativa %d", attempt));
                        return translation;
                    } else {
                        logger.warning(String.format("‚ö†Ô∏è Tradu√ß√£o completa mas n√£o atende timing - tentativa %d", attempt));
                    }
                } else {
                    logger.warning(String.format("‚ùå Tradu√ß√£o incompleta na tentativa %d: %s - %s", 
                        attempt, validation.reason(), validation.details()));
                        
                    // Se √© truncada, tenta contexto diferente na pr√≥xima tentativa
                    if (validation.reason().equals("TRUNCATED") || validation.reason().equals("ABRUPT_ENDING")) {
                        context = adjustContextForRetry(context, attempt);
                        logger.info(String.format("üîÑ Ajustando contexto para: %s", context));
                    }
                }
            } else {
                logger.warning(String.format("‚ùå Falha na tradu√ß√£o na tentativa %d - resposta nula", attempt));
            }
            
            // Pausa entre tentativas (aumenta progressivamente)
            if (attempt < maxAttempts) {
                try {
                    Thread.sleep(1000 * attempt); // 1s, 2s, 3s...
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
        
        // Todas as tentativas falharam - usar fallback
        logger.warning("‚ö†Ô∏è Todas as tentativas falharam, usando fallback");
        return handleFailedTranslation(block);
    }
    
    /**
     * AJUSTA CONTEXTO PARA RETRY baseado no tipo de falha
     */
    private static String adjustContextForRetry(String currentContext, int attemptNumber) {
        return switch (currentContext) {
            case "ultra_concise" -> "concise";           // Relaxa restri√ß√µes
            case "concise" -> "normal";                 // Mais espa√ßo
            case "normal" -> "detailed";                // M√°ximo espa√ßo
            case "detailed" -> attemptNumber > 2 ? "normal" : "concise"; // Volta ao meio
            default -> "normal";
        };
    }
    
    /**
     * LIDA COM TRADU√á√ïES FALHADAS usando fallbacks
     */
    private static String handleFailedTranslation(SimpleVTTBlock block) {
        // Tenta modelo de fallback mais simple
        String fallbackTranslation = translateWithOllamaAdvanced(block.originalText, "gemma3n:e4b", "normal", block.duration);
        
        if (fallbackTranslation != null) {
            TranslationValidation validation = validateTranslationCompleteness(block.originalText, fallbackTranslation);
            if (validation.isValid()) {
                logger.info("‚úÖ Fallback model produziu tradu√ß√£o v√°lida");
                
                // Ajusta se necess√°rio
                if (fallbackTranslation.length() > block.maxCharsForTiming) {
                    String compressed = compressBestTranslationFast(fallbackTranslation, block);
                    return compressed != null ? compressed : fallbackTranslation.substring(0, (int)block.maxCharsForTiming);
                }
                return fallbackTranslation;
            }
        }
        
        // √öltimo recurso: tradu√ß√£o b√°sica e truncar se necess√°rio
        logger.warning("‚ö†Ô∏è Usando √∫ltimo recurso: tradu√ß√£o b√°sica");
        String basicTranslation = translateWithOllamaAdvanced(block.originalText, "gemma3n:e4b", "normal", block.duration);
        
        if (basicTranslation != null) {
            if (basicTranslation.length() > block.maxCharsForTiming) {
                return basicTranslation.substring(0, (int)block.maxCharsForTiming - 3) + "...";
            }
            return basicTranslation;
        }
        
        // Fracasso total - retorna placeholder
        return "[Tradu√ß√£o n√£o dispon√≠vel]";
    }

    public static void translateFile(String inputFile, String outputFile, String method) throws Exception {
        logger.info("üåê TRADU√á√ÉO SIMPLES: " + inputFile);

        List<String> lines = Files.readAllLines(Paths.get(inputFile), StandardCharsets.UTF_8);
        List<String> outputLines = new ArrayList<>();
        
        // Cabe√ßalho VTT
        if (!lines.isEmpty() && lines.get(0).trim().equalsIgnoreCase("WEBVTT")) {
            outputLines.add("WEBVTT");
            outputLines.add("");
            lines.remove(0);
            while (!lines.isEmpty() && lines.get(0).trim().isEmpty()) {
                lines.remove(0);
            }
        }

        // Parse simples
        List<SimpleVTTBlock> blocks = parseSimpleBlocks(lines);
        logger.info("üìù Blocos encontrados: " + blocks.size());

        if (blocks.isEmpty()) {
            Files.write(Paths.get(outputFile), outputLines, StandardCharsets.UTF_8);
            return;
        }

        // TRADUZIR SEMPRE - SEM VERIFICA√á√ÉO DE IDIOMA
        logger.info("üöÄ TRADUZINDO TODOS OS " + blocks.size() + " BLOCOS");
        
        for (int i = 0; i < blocks.size(); i++) {
            SimpleVTTBlock block = blocks.get(i);
            if (!block.isEmpty()) {
                logger.info(String.format("üîÑ Traduzindo bloco %d/%d: %.50s...", 
                           i+1, blocks.size(), block.originalText));
                
                // USA TRADU√á√ÉO SIMPLES E R√ÅPIDA
                String translation = translateBlock(block);
                block.translatedText = translation != null ? translation : block.originalText;
                
                logger.info(String.format("‚úÖ Traduzido: %.50s...", block.translatedText));
            } else {
                block.translatedText = block.originalText;
            }
        }

        // Gerar sa√≠da
        for (SimpleVTTBlock block : blocks) {
            outputLines.add(block.timestamp);
            outputLines.add(block.translatedText);
            outputLines.add("");
        }

        Files.write(Paths.get(outputFile), outputLines, StandardCharsets.UTF_8);
        logger.info("‚úÖ Tradu√ß√£o conclu√≠da: " + outputFile);
    }

    private static List<SimpleVTTBlock> parseSimpleBlocks(List<String> lines) {
        List<SimpleVTTBlock> blocks = new ArrayList<>();
        String currentTimestamp = null;
        StringBuilder currentText = new StringBuilder();

        for (String line : lines) {
            line = line.trim();
            
            if (line.isEmpty() || line.matches("^\\d+$")) {
                continue;
            }

            if (TIMESTAMP_PATTERN.matcher(line).matches()) {
                // Salva bloco anterior
                if (currentTimestamp != null && currentText.length() > 0) {
                    String textBlock = currentText.toString().trim();
                    if (!textBlock.isEmpty()) {
                        SimpleVTTBlock block = new SimpleVTTBlock(currentTimestamp, textBlock);
                        if (!block.isEmpty()) {
                            blocks.add(block);
                        }
                    }
                    currentText.setLength(0);
                }
                currentTimestamp = line;
            } else if (currentTimestamp != null) {
                if (currentText.length() > 0) {
                    currentText.append(" ");
                }
                currentText.append(line);
            }
        }

        // √öltimo bloco
        if (currentTimestamp != null && currentText.length() > 0) {
            String textBlock = currentText.toString().trim();
            if (!textBlock.isEmpty()) {
                SimpleVTTBlock block = new SimpleVTTBlock(currentTimestamp, textBlock);
                if (!block.isEmpty()) {
                    blocks.add(block);
                }
            }
        }

        return blocks;
    }

    /**
     * Tradu√ß√£o R√ÅPIDA - usa apenas o melhor modelo sem valida√ß√µes complexas
     */
    private static String translateWithOllamaFast(String text) {
        Path tempFile = null;
        try {
            // Usa prompt simples e direto
            String prompt = "Traduza para portugu√™s brasileiro coloquial. Responda APENAS com a tradu√ß√£o: " + text;
            
            // Usa modelo com boa qualidade e velocidade
            String model = "gemma3n:e4b"; // Melhor balan√ßo qualidade/velocidade
            
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"prompt\":\"%s\",\"stream\":false,\"options\":{\"temperature\":0.1}}",
                model, escapeForJson(prompt)
            );
            
            tempFile = Files.createTempFile("ollama_fast", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            boolean finished = process.waitFor(15, TimeUnit.SECONDS); // Timeout mais curto
            if (!finished) {
                process.destroyForcibly();
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                return null;
            }

            String responseStr = response.toString();
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // ORDEM CORRETA: escape duplo primeiro, depois simples
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            return null;

        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora
            }
        }
    }

    /**
     * SISTEMA ADAPTATIVO INTELIGENTE - ajusta contexto baseado no timing e melhora iterativamente
     */
    private static String translateWithTimingValidation(SimpleVTTBlock block) {
        logger.info(String.format("üéØ Timing: %.1fs (m√°x %d chars)", 
                   block.duration, (int)block.maxCharsForTiming));
        
        String previousTranslation = null;
        String bestTranslation = null;
        int bestScore = -1; // Score baseado em qualidade vs timing
        
        for (int i = 0; i < AVAILABLE_MODELS.length; i++) {
            String model = AVAILABLE_MODELS[i];
            
            // DETERMINA CONTEXTO INTELIGENTE baseado no timing dispon√≠vel
            String context = determineOptimalContext(block, previousTranslation);
            
            // TRADUZ usando contexto adaptativo
            String translation;
            if (previousTranslation == null) {
                // Primeira tentativa - tradu√ß√£o normal
                translation = translateWithAdaptiveContext(block.originalText, model, context, block.duration);
            } else {
                // Tentativas seguintes - melhora tradu√ß√£o anterior
                translation = improveTranslationBasedOnTiming(
                    block.originalText, previousTranslation, model, context, block.duration, block.maxCharsForTiming
                );
            }
            
            if (translation != null) {
                int score = evaluateTranslationQuality(translation, block);
                
                // Atualiza melhor tradu√ß√£o baseado no score
                if (score > bestScore) {
                    bestTranslation = translation;
                    bestScore = score;
                }
                
                // Se cabe perfeitamente no timing, usa imediatamente
                if (block.translationFitsInTiming(translation)) {
                    logger.info(String.format("‚úÖ PERFEITO: %s + %s (%d chars, score: %d)", 
                               model, context, translation.length(), score));
                    return translation;
                } else {
                    logger.info(String.format("üìù Candidato: %s + %s (%d chars, score: %d) - %s", 
                               model, context, translation.length(), score, 
                               translation.length() > block.maxCharsForTiming ? "muito longo" : "timing OK"));
                }
                
                previousTranslation = translation;
            }
        }
        
        // FALLBACK ULTRA-AGRESSIVO - APENAS se timing estiver muito pr√≥ximo (reduzir timeouts)
        if (bestTranslation != null && !block.translationFitsInTiming(bestTranslation)) {
            double excess = (bestTranslation.length() - block.maxCharsForTiming) / block.maxCharsForTiming;
            
            // S√≥ tenta compress√£o se excesso for pequeno (< 50%), sen√£o √© perda de tempo
            if (excess < 0.5) {
                logger.warning("üÜò Tentando compress√£o r√°pida (excesso: " + String.format("%.1f%%", excess * 100) + ")...");
                String compressedTranslation = compressBestTranslationFast(bestTranslation, block);
                if (compressedTranslation != null && block.translationFitsInTiming(compressedTranslation)) {
                    logger.info("‚úÖ Compress√£o funcionou: " + compressedTranslation.length() + " chars");
                    return compressedTranslation;
                }
            } else {
                logger.warning("üö´ Excesso muito grande (" + String.format("%.1f%%", excess * 100) + "), pulando compress√£o");
            }
        }
        
        // Retorna melhor tradu√ß√£o dispon√≠vel
        if (bestTranslation != null) {
            logger.warning("üÜò USANDO MELHOR TRADU√á√ÉO (score: " + bestScore + ")");
            return bestTranslation;
        }
        
        // √öltimo recurso: texto original
        logger.warning("üÜò USANDO TEXTO ORIGINAL - nenhuma tradu√ß√£o foi gerada");
        return block.originalText;
    }

    /**
     * DETERMINA CONTEXTO OPTIMAL baseado no timing, TTS e tradu√ß√£o anterior
     */
    private static String determineOptimalContext(SimpleVTTBlock block, String previousTranslation) {
        double availableRatio = block.maxCharsForTiming / Math.max(1, block.originalText.length());
        double ttsOptimalChars = block.duration * CHARS_PER_SECOND_PT; // Chars ideais para TTS natural
        
        // An√°lise do contexto da fala baseado no texto original
        String speechContext = analyzeSpeechContext(block.originalText);
        ContentPriority priority = analyzeContentPriority(block.originalText);
        
        if (previousTranslation != null) {
            // Adapta√ß√£o baseada na tentativa anterior COM PROTE√á√ÉO DE CONTE√öDO ESSENCIAL
            double excessRatio = previousTranslation.length() / block.maxCharsForTiming;
            
            if (excessRatio > 1.4) {
                // S√≥ comprime drasticamente se n√£o for conte√∫do cr√≠tico
                if (priority == ContentPriority.CRITICAL) {
                    return "concise"; // Mant√©m mais informa√ß√£o para conte√∫do cr√≠tico
                } else {
                    return "ultra_concise";
                }
            } else if (excessRatio > 1.15) {
                return "concise";
            } else if (excessRatio < 0.5) {
                // Expans√£o inteligente baseada no contexto e dura√ß√£o
                if (block.duration > 8.0 && speechContext.equals("instructional")) {
                    return "detailed"; // Aproveita tempo extra para educa√ß√£o
                } else if (block.duration > 5.0) {
                    return "normal";
                } else {
                    return "concise"; // Mant√©m conciso para blocos curtos mesmo com espa√ßo
                }
            }
        }
        
        // AN√ÅLISE CR√çTICA: Blocos muito curtos precisam estrat√©gia especial
        if (block.duration < CRITICAL_TIMING_THRESHOLD) {
            if (priority == ContentPriority.CRITICAL) {
                return "concise"; // Mant√©m essencial mesmo em tempo curto
            } else {
                return "ultra_concise"; // M√°xima compress√£o para n√£o-cr√≠ticos
            }
        }
        
        // An√°lise din√¢mica baseada no tipo de conte√∫do e timing
        if (speechContext.equals("technical")) {
            // Conte√∫do t√©cnico: prioriza clareza sobre velocidade
            if (availableRatio < 0.8 && priority != ContentPriority.CRITICAL) {
                return "concise";
            } else if (availableRatio > 1.4) {
                return "detailed"; // Aproveita tempo para explicar melhor conceitos t√©cnicos
            } else {
                return "normal";
            }
        } else if (speechContext.equals("conversational")) {
            // Conte√∫do conversacional: pode comprimir mais naturalmente
            if (availableRatio < 0.9) {
                return "ultra_concise"; // Contra√ß√µes e linguagem informal natural
            } else if (availableRatio < 1.4) {
                return "concise";
            } else {
                return "normal"; // Evita over-expansion em conversas
            }
        } else if (speechContext.equals("instructional")) {
            // Conte√∫do instrucional: equilibra compress√£o com clareza educacional
            if (availableRatio < 0.85) {
                return priority == ContentPriority.CRITICAL ? "concise" : "ultra_concise";
            } else if (availableRatio > 1.6) {
                return "detailed"; // Expans√£o educacional valiosa
            } else {
                return "normal";
            }
        } else if (speechContext.equals("enthusiastic")) {
            // Conte√∫do entusi√°stico: mant√©m energia mesmo comprimindo
            if (availableRatio < 0.8) {
                return "concise"; // Comprime mas mant√©m entusiasmo
            } else {
                return "normal";
            }
        }
        
        // Fallback baseado no timing dispon√≠vel (m√©todo original aprimorado)
        if (availableRatio < 0.75) {
            return priority == ContentPriority.CRITICAL ? "concise" : "ultra_concise";
        } else if (availableRatio < 1.2) {
            return "concise";
        } else if (availableRatio < 1.7) {
            return "normal";
        } else {
            return "detailed"; // Aproveita tempo abundante
        }
    }
    
    /**
     * Enum para prioridade de conte√∫do
     */
    private enum ContentPriority {
        CRITICAL,    // Informa√ß√£o essencial que n√£o pode ser perdida
        IMPORTANT,   // Informa√ß√£o importante mas comprim√≠vel
        NORMAL,      // Informa√ß√£o padr√£o
        FILLER       // Palavras de preenchimento que podem ser removidas
    }
    
    /**
     * ANALISA PRIORIDADE DO CONTE√öDO para prote√ß√£o de informa√ß√£o essencial
     */
    private static ContentPriority analyzeContentPriority(String text) {
        if (text == null) return ContentPriority.NORMAL;
        
        String lowerText = text.toLowerCase();
        
        // Conte√∫do CR√çTICO - nunca deve ser perdido
        if (lowerText.matches(".*(important|critical|essential|must|required|necessary).*") ||
            lowerText.matches(".*(error|warning|caution|danger|alert).*") ||
            lowerText.matches(".*(step [0-9]|first|second|third|finally|conclusion).*") ||
            lowerText.matches(".*(definition|means|is defined as|refers to).*")) {
            return ContentPriority.CRITICAL;
        }
        
        // Conte√∫do IMPORTANTE - pode ser comprimido mas deve ser preservado
        if (lowerText.matches(".*(because|therefore|however|but|although|since).*") ||
            lowerText.matches(".*(example|for instance|such as|like).*") ||
            lowerText.matches(".*(remember|note|notice|observe).*")) {
            return ContentPriority.IMPORTANT;
        }
        
        // Palavras de PREENCHIMENTO - podem ser removidas
        if (lowerText.matches(".*(well|um|uh|you know|basically|actually|really|very|quite).*") ||
            lowerText.matches(".*(sort of|kind of|pretty much|i mean|right).*")) {
            return ContentPriority.FILLER;
        }
        
        return ContentPriority.NORMAL;
    }
    
    /**
     * ANALISA CONTEXTO DA FALA para adapta√ß√£o din√¢mica
     */
    private static String analyzeSpeechContext(String text) {
        if (text == null) return "normal";
        
        String lowerText = text.toLowerCase();
        
        // Identificar conte√∫do t√©cnico
        if (lowerText.matches(".*(function|method|class|algorithm|code|syntax|variable|parameter|debug).*") ||
            lowerText.matches(".*(configure|install|setup|compile|execute|run|build).*")) {
            return "technical";
        }
        
        // Identificar conte√∫do instrucional
        if (lowerText.matches(".*(let's|how to|step|first|next|then|finally|remember|make sure).*") ||
            lowerText.matches(".*(now|so|here|this is|what we|you need|important).*")) {
            return "instructional";
        }
        
        // Identificar conte√∫do conversacional
        if (lowerText.matches(".*(you know|well|actually|basically|pretty|really|kind of).*") ||
            lowerText.matches(".*(right|okay|cool|awesome|great|nice).*")) {
            return "conversational";
        }
        
        // Identificar emo√ß√£o/entusiasmo (precisa manter energia na tradu√ß√£o)
        if (lowerText.matches(".*(amazing|incredible|fantastic|awesome|wow|great|excellent).*") ||
            lowerText.matches(".*(love|excited|enjoy|fun|cool|interesting).*")) {
            return "enthusiastic";
        }
        
        return "normal";
    }
    
    /**
     * TRADU√á√ÉO COM CONTEXTO ADAPTATIVO
     */
    private static String translateWithAdaptiveContext(String text, String model, String context, double duration) {
        return translateWithOllamaAdvanced(text, model, context, duration);
    }
    
    /**
     * MELHORA TRADU√á√ÉO ANTERIOR baseada no timing e contexto
     */
    private static String improveTranslationBasedOnTiming(String originalText, String previousTranslation, 
                                                         String model, String context, double duration, double maxChars) {
        Path tempFile = null;
        try {
            // Monta prompt de melhoria inteligente
            String improvementPrompt = buildImprovementPrompt(originalText, previousTranslation, context, duration, maxChars);
            
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"prompt\":\"%s\",\"stream\":false,\"options\":{\"temperature\":0.1}}",
                model, escapeForJson(improvementPrompt)
            );
            
            tempFile = Files.createTempFile("ollama_improve", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            boolean finished = process.waitFor(8, TimeUnit.SECONDS);
            if (!finished) {
                process.destroyForcibly();
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                return null;
            }

            String responseStr = response.toString();
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // ORDEM CORRETA: escape duplo primeiro, depois simples
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                               
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            return null;

        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora
            }
        }
    }
    
    /**
     * AVALIA QUALIDADE DA TRADU√á√ÉO (score 0-100)
     */
    private static int evaluateTranslationQuality(String translation, SimpleVTTBlock block) {
        if (translation == null || translation.trim().isEmpty()) {
            return 0;
        }
        
        int score = 50; // Base score
        
        // B√¥nus se cabe no timing perfeitamente
        if (block.translationFitsInTiming(translation)) {
            score += 30;
        } else {
            // Penalidade baseada no quanto ultrapassa
            double excess = (translation.length() - block.maxCharsForTiming) / block.maxCharsForTiming;
            if (excess > 0) {
                score -= Math.min(25, (int)(excess * 50)); // Penalidade m√°xima de 25 pontos
            }
        }
        
        // B√¥nus por qualidade da tradu√ß√£o
        if (!translation.equals(block.originalText)) {
            score += 15; // B√¥nus por traduzir (vs manter original)
        }
        
        // B√¥nus por naturalidade (presen√ßa de contra√ß√µes brasileiras)
        if (translation.contains("pra") || translation.contains("t√°") || translation.contains("n√©") || 
            translation.contains("c√™") || translation.contains("vamo")) {
            score += 5;
        }
        
        return Math.max(0, Math.min(100, score));
    }
    
    /**
     * COMPRESS√ÉO INTELIGENTE E R√ÅPIDA com preserva√ß√£o de significado
     */
    private static String compressBestTranslationFast(String bestTranslation, SimpleVTTBlock block) {
        Path tempFile = null;
        try {
            // Analisa o que deve ser preservado antes de comprimir
            String essentialContent = extractEssentialContent(block.originalText);
            ContentPriority priority = analyzeContentPriority(block.originalText);
            
            String compressionPrompt = String.format(
                "INTELLIGENT FAST COMPRESSION: Rewrite to fit %d chars (%.1fs) while preserving core meaning. " +
                "\n\nESSENTIAL TO PRESERVE: %s" +
                "\n\nCOMPRESSION PRIORITY: %s" +
                "\n\nSMART COMPRESSION RULES: " +
                "- KEEP all essential information and key concepts " +
                "- REMOVE only filler words and redundancies " +
                "- USE efficient contractions: 'pra', 't√°', 'c√™', 'n√©' " +
                "- ADD strategic comma for TTS breathing if needed " +
                "- ENSURE natural pronunciation flow " +
                "\n\nCurrent translation: %s\n\n" +
                "PROVIDE COMPRESSED VERSION THAT PRESERVES MEANING:",
                (int)block.maxCharsForTiming, block.duration, essentialContent, 
                priority == ContentPriority.CRITICAL ? "CRITICAL - Preserve all key information" : "NORMAL - Standard compression",
                bestTranslation
            );
            
            // Usa modelo mais r√°pido
            String model = AVAILABLE_MODELS[0];
            
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"prompt\":\"%s\",\"stream\":false,\"options\":{\"temperature\":0.0}}",
                model, escapeForJson(compressionPrompt)
            );
            
            tempFile = Files.createTempFile("ollama_fast_compress", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            // TIMEOUT MUITO REDUZIDO - m√°ximo 30 segundos
            boolean finished = process.waitFor(30, TimeUnit.SECONDS);
            if (!finished) {
                process.destroyForcibly();
                logger.warning("‚è∞ Timeout na compress√£o r√°pida (30s)");
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                return null;
            }

            String responseStr = response.toString();
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // ORDEM CORRETA: escape duplo primeiro, depois simples
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                               
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            return null;

        } catch (Exception e) {
            logger.warning("‚ùå Erro na compress√£o r√°pida: " + e.getMessage());
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora
            }
        }
    }

    
    /**
     * MONTA PROMPT DE MELHORIA INTELIGENTE com preserva√ß√£o de conte√∫do
     */
    private static String buildImprovementPrompt(String originalText, String previousTranslation, 
                                               String context, double duration, double maxChars) {
        String basePrompt = buildSystemPrompt();
        String improvementInstruction = "";
        
        // Analisa o que deve ser preservado no conte√∫do
        String essentialContent = extractEssentialContent(originalText);
        
        switch (context) {
            case "ultra_concise":
                improvementInstruction = String.format(
                    "\n\nINTELLIGENT COMPRESSION REQUIRED: Previous translation exceeded timing constraints. " +
                    "Rewrite to fit MAXIMUM %d characters (%.1fs) while preserving CORE MEANING. " +
                    "\n\nESSENTIAL CONTENT TO PRESERVE: %s" +
                    "\n\nCOMPRESSION STRATEGY: " +
                    "- KEEP essential concepts and keywords " +
                    "- REMOVE filler words (actually, basically, well, you know) " +
                    "- USE natural contractions: 'pra', 't√°', 'c√™' " +
                    "- COMBINE related ideas into single phrases " +
                    "- ENSURE TTS-friendly pronunciation " +
                    "- ADD strategic commas ONLY where necessary for breathing " +
                    "\n\nOriginal: %s\n" +
                    "Previous (too long): %s\n\n" +
                    "PROVIDE THE COMPRESSED VERSION THAT PRESERVES MEANING:",
                    (int)maxChars, duration, essentialContent, originalText, previousTranslation);
                break;
                
            case "concise":
                improvementInstruction = String.format(
                    "\n\nBALANCED COMPRESSION: Previous translation needs adjustment for %.1fs timing. " +
                    "Rewrite to fit %d characters while maintaining educational value. " +
                    "\n\nESSENTIAL CONTENT: %s" +
                    "\n\nREVISION STRATEGY: " +
                    "- Preserve all key concepts and important information " +
                    "- Use more concise but natural phrasing " +
                    "- Include strategic pauses (1-2 commas) for TTS emphasis " +
                    "- Choose shorter but equivalent words when possible " +
                    "- Maintain natural Brazilian Portuguese flow " +
                    "\n\nOriginal: %s\n" +
                    "Previous: %s\n\n" +
                    "PROVIDE THE IMPROVED CONCISE VERSION:",
                    duration, (int)maxChars, essentialContent, originalText, previousTranslation);
                break;
                
            case "detailed":
                improvementInstruction = String.format(
                    "\n\nEDUCATIONAL EXPANSION: Previous translation was too brief for %.1fs available. " +
                    "Expand to %d characters maximum with valuable educational content. " +
                    "\n\nCORE CONTENT: %s" +
                    "\n\nEXPANSION STRATEGY: " +
                    "- Add helpful explanations and context " +
                    "- Include educational connectors and transitions " +
                    "- Use descriptive language that aids comprehension " +
                    "- Add strategic pauses (2-3 commas) for TTS pacing " +
                    "- Expand with meaningful content, not padding " +
                    "- Ensure natural TTS delivery rhythm " +
                    "\n\nOriginal: %s\n" +
                    "Previous (too short): %s\n\n" +
                    "PROVIDE THE EDUCATIONALLY EXPANDED VERSION:",
                    duration, (int)maxChars, essentialContent, originalText, previousTranslation);
                break;
                
            default: // normal
                improvementInstruction = String.format(
                    "\n\nTIMING OPTIMIZATION: Fine-tune translation for perfect %.1fs timing (%d chars max). " +
                    "\n\nKEY CONTENT: %s" +
                    "\n\nOPTIMIZATION FOCUS: " +
                    "- Perfect balance between content and timing " +
                    "- Natural TTS pronunciation and flow " +
                    "- Strategic comma placement for breathing and emphasis " +
                    "- Maintain educational clarity and engagement " +
                    "\n\nOriginal: %s\n" +
                    "Previous: %s\n\n" +
                    "PROVIDE THE TIMING-OPTIMIZED VERSION:",
                    duration, (int)maxChars, essentialContent, originalText, previousTranslation);
                break;
        }
        
        return basePrompt + improvementInstruction;
    }
    
    /**
     * VALIDA COMPLETUDE DA TRADU√á√ÉO
     */
    private static TranslationValidation validateTranslationCompleteness(String originalText, String translation) {
        if (translation == null || translation.trim().isEmpty()) {
            return new TranslationValidation(false, "EMPTY_TRANSLATION", "Tradu√ß√£o vazia ou nula");
        }
        
        String cleanTranslation = translation.trim();
        
        // 1. Verifica indicadores de truncamento
        for (String indicator : INCOMPLETE_INDICATORS) {
            if (cleanTranslation.matches(".*" + indicator + "\\s*$")) {
                return new TranslationValidation(false, "TRUNCATED", 
                    "Termina com indicador de truncamento: " + indicator);
            }
        }
        
        // 2. Verifica se termina abruptamente (sem pontua√ß√£o) - mais toler√¢ncia
        if (!cleanTranslation.matches(".*[.!?;:,]\\s*$") && cleanTranslation.length() > 50) {
            // Verifica se n√£o √© uma frase naturalmente curta ou palavra isolada
            if (!cleanTranslation.matches(".*(sim|n√£o|ok|certo|muito bem|perfeito|legal|[A-Za-z√†-√ø]+)\\s*$")) {
                return new TranslationValidation(false, "ABRUPT_ENDING", 
                    "Termina abruptamente sem pontua√ß√£o");
            }
        }
        
        // 3. Verifica propor√ß√£o de tamanho (muito curta pode indicar incompletude) - mais toler√¢ncia
        double completionRatio = (double) cleanTranslation.length() / Math.max(1, originalText.length());
        if (completionRatio < MIN_COMPLETION_RATIO && originalText.length() > 100 && cleanTranslation.length() < 10) {
            return new TranslationValidation(false, "TOO_SHORT", 
                String.format("Tradu√ß√£o muito curta: %.1f%% do original", completionRatio * 100));
        }
        
        // 4. Verifica estrutura de senten√ßa b√°sica
        if (cleanTranslation.length() > 20 && !cleanTranslation.matches(".*\\s.*")) {
            return new TranslationValidation(false, "MALFORMED", 
                "Tradu√ß√£o parece malformada (sem espa√ßos)");
        }
        
        // 5. Verifica se cont√©m tokens de controle residuais
        if (cleanTranslation.matches(".*(\\\\u[0-9a-fA-F]+|<[^>]*>|\\\\[ntr]|\\\\\\\\).*")) {
            return new TranslationValidation(false, "CONTROL_TOKENS", 
                "Cont√©m tokens de controle n√£o processados");
        }
        
        return new TranslationValidation(true, "COMPLETE", "Tradu√ß√£o completa e v√°lida");
    }
    
    /**
     * Record para resultado de valida√ß√£o
     */
    private record TranslationValidation(boolean isValid, String reason, String details) {}
    
    /**
     * VALIDA SE TRADU√á√ÉO ATENDE CRIT√âRIOS DE TIMING
     */
    private static boolean isTranslationValid(String translation, SimpleVTTBlock block) {
        if (translation == null || translation.trim().isEmpty()) {
            return false;
        }
        
        // Verifica se respeita o limite de caracteres para timing
        if (translation.length() > block.maxCharsForTiming * 1.1) { // 10% de toler√¢ncia
            return false;
        }
        
        // Verifica se n√£o √© muito curta (pode indicar erro)
        if (translation.length() < 3) {
            return false;
        }
        
        return true;
    }
    
    /**
     * EXTRAI CONTE√öDO ESSENCIAL que deve ser preservado
     */
    private static String extractEssentialContent(String text) {
        if (text == null) return "";
        
        // Identifica elementos cr√≠ticos que n√£o podem ser perdidos
        String essential = "";
        String lowerText = text.toLowerCase();
        
        // Conceitos t√©cnicos importantes
        if (lowerText.matches(".*(function|method|class|variable|parameter|algorithm).*")) {
            essential += "[Technical concepts] ";
        }
        
        // Instru√ß√µes sequenciais
        if (lowerText.matches(".*(step|first|second|then|next|finally).*")) {
            essential += "[Sequential instructions] ";
        }
        
        // Avisos ou informa√ß√µes cr√≠ticas
        if (lowerText.matches(".*(important|warning|note|remember|must|required).*")) {
            essential += "[Critical information] ";
        }
        
        // Defini√ß√µes ou explica√ß√µes
        if (lowerText.matches(".*(means|defined as|refers to|is called).*")) {
            essential += "[Definitions] ";
        }
        
        // Exemplos
        if (lowerText.matches(".*(example|for instance|such as|like).*")) {
            essential += "[Examples] ";
        }
        
        return essential.trim().isEmpty() ? "[Main educational content]" : essential.trim();
    }

    private static String buildSystemPrompt() {
        return """
            You are an expert dubbing and localization specialist for educational content from English to Brazilian Portuguese.
            
            OBJECTIVE: Translate and CORRECT educational video subtitles with natural, professional Brazilian Portuguese optimized for TTS dubbing systems and timestamp synchronization.
            
            CRITICAL FIRST STEP - TRANSCRIPTION CORRECTION:
            Before translating, ANALYZE the English text for transcription errors and correct them based on context:
            - Fix obvious speech recognition mistakes (homophones, missing words, garbled text)
            - Correct incomplete sentences that make contextual sense
            - Fix technical terms that were misheard (e.g., "react" instead of "re-act", "JavaScript" instead of "java script")
            - Maintain the original meaning while ensuring grammatical correctness
            - If text seems nonsensical, infer the most likely intended meaning from context
            
            DYNAMIC TIMING ADAPTATION RULES:
            1. TIMESTAMP FLEXIBILITY: Adapt translation length based on available subtitle duration
               - For SHORT timestamps (< 2 seconds): Use concise, direct translations with natural Brazilian contractions
               - For MEDIUM timestamps (2-4 seconds): Provide balanced, natural translations maintaining educational clarity
               - For LONG timestamps (> 4 seconds): Expand naturally without padding, maintaining engagement and flow
            
            2. TTS RHYTHM OPTIMIZATION: Structure sentences for natural Text-to-Speech delivery
               - Use strategic COMMA placement for natural breathing pauses in TTS
               - Avoid complex consonant clusters that make TTS sound robotic
               - Balance syllable distribution for smooth TTS pronunciation rhythm
               - Consider natural Brazilian Portuguese stress patterns and intonation
            
            3. CHARACTER COUNT EFFICIENCY: Optimize translation density for TTS timing
               - Calculate approximately 15 characters per second for natural Brazilian Portuguese TTS
               - Prioritize information density while maintaining naturalness
               - Use strategic abbreviations and contractions when appropriate for timing
               - Ensure essential educational content is never sacrificed for brevity
            
            4. ADAPTIVE SPEED CONSIDERATIONS: Account for variable TTS delivery speeds
               - For fast delivery needs: Use shorter words, simpler sentence structures
               - For slower delivery needs: Allow for more descriptive, detailed explanations
               - Maintain comprehension regardless of playback speed adjustments
            
            TRANSLATION RULES:
            1. Use natural Brazilian Portuguese with moderate colloquial level appropriate for educational content
            2. Maintain approximate lip sync timing when possible for dubbing synchronization
            3. Completely preserve the original emotion, emphasis, and pedagogical intention
            4. Use MODERATE contractions strategically for natural flow and timing: "para" ‚Üí "pra", "est√°" ‚Üí "t√°"
            5. Adapt idiomatic expressions to culturally relevant Brazilian equivalents
            6. DYNAMICALLY respect timing constraints while maintaining educational clarity
            7. Balance accessibility with professionalism - avoid excessive regional slang
            
            ENHANCED STYLE FOR EDUCATIONAL CONTENT:
            - Clear, didactic but approachable language that maintains student engagement
            - Preserve technical terms when they enhance comprehension, simplify when timing is tight
            - Use natural Brazilian connectors that aid comprehension: "ent√£o", "assim", "dessa forma", "ou seja"
            - Maintain natural Brazilian speech rhythm with appropriate emphasis for TTS
            - Transform rhetorical questions to engage Brazilian learners effectively
            - Ensure conceptual clarity is prioritized, with timing optimization as secondary consideration
            
            CONTEXTUAL SPEECH ADAPTATION:
            - Analyze the apparent speaking pace from the original content context
            - For instructional segments: Use clear, measured language suitable for learning
            - For enthusiastic segments: Maintain energy while ensuring TTS can convey excitement naturally
            - For technical explanations: Prioritize clarity over speed, using natural pauses
            - For casual conversations: Use appropriate Brazilian colloquialisms that enhance relatability
            
            REGIONAL BRAZILIAN CONSIDERATIONS:
            - Use neutral Brazilian Portuguese that works across all regions
            - Incorporate mild colloquialisms that enhance relatability without alienating any region
            - Consider how technical terms are commonly used in Brazilian educational contexts
            - Adapt cultural references to Brazilian equivalents when necessary
            - Use pronunciation-friendly alternatives for complex terms
            
            NATURAL ADAPTATIONS FOR BRAZILIAN CONTEXT:
            "you know" ‚Üí "sabe" or "voc√™ sabe" (maintains conversational tone, good for timing)
            "hands-on practice" ‚Üí "pr√°tica hands-on" or "colocar a m√£o na massa" (culturally relevant)
            "let's dive into" ‚Üí "vamos explorar" or "vamos mergulhar em" (maintains energy, timing-flexible)
            "that's awesome" ‚Üí "isso √© incr√≠vel" or "que massa" (age-appropriate enthusiasm)
            "make sure you" ‚Üí "certifique-se de" or "n√£o esque√ßa de" (instructional clarity)
            "so basically" ‚Üí "ent√£o basicamente" or "resumindo" (maintains flow, timing-conscious)
            "all right" ‚Üí "certo" or "muito bem" (natural transitions, good for TTS)
            "let's get started" ‚Üí "vamos come√ßar" or "m√£os √† obra" (energetic beginnings)
            
            ENHANCED PROCESS:
            1. Analyze English text for transcription errors and correct contextually
            2. Identify key educational concepts that must be preserved
            3. Assess implied speaking pace and energy level from context
            4. Consider TTS pronunciation and rhythm requirements
            5. Translate with attention to Brazilian cultural context and speech patterns
            6. Optimize for natural TTS delivery while maintaining educational value
            7. Respond ONLY with the final Portuguese translation
            
            CRITICAL REQUIREMENTS: 
            - NO explanations, reasoning, comments, or extra text in response
            - NO control tokens like </end_of_turn> or similar AI markup
            - Prioritize natural speech flow for TTS systems while respecting timing constraints
            - Maintain educational clarity and engagement as primary goal
            - Ensure cultural appropriateness for Brazilian learners
            - Adapt translation length and complexity based on available subtitle duration
            - PRESERVE technical terms, file names, and code references exactly (e.g., 'not-found.tsx')
            - Use smooth compression: prefer shorter phrases from start rather than aggressive cutting
            - Ensure every translation is complete and naturally flows into next subtitle
            """;
    }

    private static String buildContextualPrompt(String contextType, double duration) {
        String basePrompt = buildSystemPrompt();
        String contextInstruction = "";
        
        // C√°lculos adaptativos para diferentes estrat√©gias
        double targetChars = duration < CRITICAL_TIMING_THRESHOLD ? 
                           duration * CHARS_PER_SECOND_FAST : 
                           duration * CHARS_PER_SECOND_PT;
        
        switch (contextType) {
            case "ultra_concise":
                contextInstruction = String.format(
                    "\n\nULTRA TTS CONSTRAINT: ONLY %.1f seconds - SMOOTH COMPRESSION required. " +
                    "PRESERVE CORE MEANING with natural efficiency: " +
                    "\n\nSMOOTH COMPRESSION STRATEGY: " +
                    "- START WITH CONCISE PHRASING: Create naturally short sentences from beginning " +
                    "- PRESERVE technical terms, file names, code references EXACTLY (e.g., 'not-found.tsx') " +
                    "- REMOVE only filler words: 'well', 'actually', 'basically', 'you know', 'sort of' " +
                    "- USE TTS-optimized words: 'f√°cil' not 'simplificado', 'usar' not 'utilizar' " +
                    "- COMBINE ideas smoothly: 'Agora vamos...' instead of 'Agora n√≥s vamos...' " +
                    "- ONE strategic comma for TTS breathing, placed before key concepts " +
                    "- Target ~%.0f characters maximum with natural flow " +
                    "- ENSURE translation is COMPLETE and ready for next subtitle " +
                    "- RESPOND QUICKLY - avoid complex analysis to prevent timeouts " +
                    "\n\nCRITICAL: Prioritize SPEED and natural short phrasing over complex optimization",
                    duration, targetChars * 0.8); // 80% da capacidade para seguran√ßa m√°xima
                break;
                
            case "concise":
                contextInstruction = String.format(
                    "\n\nTTS TIMING: %.1f seconds - BALANCED NATURAL PHRASING with meaning preservation. " +
                    "\n\nNATURAL COMPRESSION RULES: " +
                    "- START with naturally concise phrasing rather than cutting later " +
                    "- PRESERVE ALL essential information, technical terms, and file names " +
                    "- REMOVE only truly redundant words and excessive descriptors " +
                    "- USE natural Brazilian contractions appropriately: 'pra', 't√°', 'c√™' " +
                    "- INCLUDE 1-2 strategic pauses (commas) for TTS breathing and emphasis " +
                    "- CHOOSE words with clear TTS pronunciation and natural rhythm " +
                    "- TARGET ~%.0f characters for comfortable delivery " +
                    "- ENSURE complete sentences that flow naturally into next subtitle " +
                    "\n\nRHYTHM STRATEGY: Balance brevity with natural speech patterns",
                    duration, targetChars);
                break;
                
            case "normal":
                contextInstruction = String.format(
                    "\n\nOPTIMAL TTS TIMING: %.1f seconds - NATURAL Brazilian Portuguese delivery. " +
                    "\n\nNATURAL FLOW OPTIMIZATION: " +
                    "- Use complete, well-structured sentences with natural rhythm " +
                    "- Include appropriate pauses (2-3 commas) for TTS breath control and phrasing " +
                    "- Balance syllable distribution for smooth TTS pronunciation " +
                    "- Use varied sentence length for engaging TTS delivery " +
                    "- Target ~%.0f characters for comfortable, clear delivery " +
                    "- Emphasize educational concepts through strategic phrasing " +
                    "\n\nEMPHASIS STRATEGY: Use natural Brazilian Portuguese stress patterns",
                    duration, targetChars);
                break;
                
            case "detailed":
                contextInstruction = String.format(
                    "\n\nEXTENDED TTS TIMING: %.1f seconds - COMPREHENSIVE delivery with rich content. " +
                    "\n\nEXPANSION STRATEGY: " +
                    "- Add valuable educational context and explanations " +
                    "- Use descriptive language that enhances understanding " +
                    "- Include natural connectors and transitions for TTS flow " +
                    "- Add clarifying phrases that improve comprehension " +
                    "- Use strategic pauses (3-4 commas) for TTS emphasis and pacing " +
                    "- Target ~%.0f characters for rich, informative delivery " +
                    "\n\nEDUCATIONAL ENHANCEMENT: Expand with meaningful context, not just padding",
                    duration, targetChars * 1.2); // 120% para aproveitar tempo extra
                break;
        }
        
        return basePrompt + contextInstruction + 
               "\n\nCRITICAL OUTPUT REQUIREMENTS: " +
               "- Respond ONLY with the Portuguese translation optimized for TTS delivery " +
               "- NO AI markup, control tokens, or meta-text (no </end_of_turn>, <think>, etc.) " +
               "- NO explanations, comments, or reasoning after the translation " +
               "- PRESERVE technical terms and file names exactly as written " +
               "- ENSURE translation is complete and flows naturally " +
               "- Every comma should serve TTS pacing or emphasis purpose";
    }
    
    private static String escapeForJson(String input) {
        if (input == null) return "";
        
        return input
            .replace("\\", "\\\\")    // Escape backslashes first
            .replace("\"", "\\\"")    // Escape quotes  
            .replace("\n", "\\n")     // Escape newlines
            .replace("\r", "\\r")     // Escape carriage returns
            .replace("\t", "\\t")     // Escape tabs
            .replace("\b", "\\b")     // Escape backspaces
            .replace("\f", "\\f");    // Escape form feeds
    }
    
    private static String cleanAIThoughts(String translation) {
        if (translation == null) return null;
        
        logger.info(String.format("üßπ Entrada cleanAIThoughts: '%.100s...'", translation));
        
        try {
            // Remove pensamentos da IA e explica√ß√µes comuns
            String cleaned = translation
                // PRIMEIRO: Remove tokens Unicode de controle da IA - M√ÅXIMA AGRESSIVIDADE
                .replaceAll("\\\\u[0-9a-fA-F]{4}", "")                      // Remove qualquer \\uXXXX
                .replace("\u003c", "").replace("\u003e", "").replace("\u003C", "").replace("\u003E", "") // Remove Unicode direto
                .replaceAll("\\\\u003[cC].*?\\\\u003[eE]", "")               // Remove com escapes duplos
                .replaceAll("\\\\u003c.*?\\\\u003e", "")                    // Remove com escapes duplos
                .replaceAll("</?end_of_turn>", "")                          // Remove <end_of_turn> variants
                .replaceAll("</?(start|end)_of_turn>", "")                  // Remove start/end tokens
                .replaceAll("<think>.*?</think>", "")                       // Remove tags de pensamento
                .replaceAll("<reasoning>.*?</reasoning>", "")               // Remove reasoning tags
                .replaceAll("\\\\(?![ntrt\"\\\\])", "")                     // Remove barras invertidas isoladas (PRESERVA escapes v√°lidos)
                
                // Remove prefixos de explica√ß√£o da IA
                .replaceAll("(?i)^.*?(?:aqui est√°|here is|here's).*?:", "") // "Aqui est√° a tradu√ß√£o:"
                .replaceAll("(?i)^.*?(?:tradu√ß√£o|translation).*?:", "")     // "Tradu√ß√£o:"
                .replaceAll("(?i)^.*?(?:seria|would be).*?:", "")           // "A tradu√ß√£o seria:"
                .replaceAll("(?i)^.*?(?:portugu√™s|portuguese).*?:", "")     // "Em portugu√™s:"
                .replaceAll("(?i)^.*?(?:response|resposta).*?:", "")        // "Response:" ou "Resposta:"
                
                // Remove continua√ß√µes inv√°lidas da IA - PROBLEMA ESPEC√çFICO
                .replaceAll("\\s*user\\s*", " ")                            // Remove "user" isolado
                .replaceAll("Text to translate:.*$", "")                   // Remove "Text to translate: ..." at√© o final
                .replaceAll("The most common.*$", "")                      // Remove continua√ß√µes espec√≠ficas
                
                // Remove explica√ß√µes no final
                .replaceAll("(?i)\\n.*?(?:explica√ß√£o|explanation).*", "")   // Remove explica√ß√µes
                .replaceAll("(?i)\\n.*?(?:nota|note).*", "")                // Remove notas
                .replaceAll("(?i)\\n.*?(?:observa√ß√£o|observation).*", "")  // Remove observa√ß√µes
                
                // Remove coment√°rios com cuidado - PRESERVA par√™nteses com c√≥digo/nomes de arquivo
                .replaceAll("(?i)\\*(?:note|nota|obs|observa√ß√£o).*?\\*", "") // Remove *nota* mas preserva outros *
                .replaceAll("\\[(?:note|nota|obs|observa√ß√£o).*?\\]", "")     // Remove [nota] mas preserva outros []
                // N√ÉO remove todos os par√™nteses - apenas os de coment√°rios explicativos
                .replaceAll("\\((?:note|nota|obs|observa√ß√£o|explanation|explica√ß√£o).*?\\)", "") // Remove apenas par√™nteses explicativos
                
                // Normaliza√ß√£o final
                .replaceAll("\\n+", " ")                                    // Une m√∫ltiplas linhas
                .replaceAll("\\s+", " ")                                    // Normaliza espa√ßos
                .trim();
        
            // LIMPEZA FINAL AGRESSIVA para casos extremos
            if (cleaned.contains("\\u003") || cleaned.contains("\\\\")) {
                // Se ainda cont√©m escapes problem√°ticos, for√ßa limpeza total
                cleaned = cleaned.replaceAll("\\\\u[0-9a-fA-F]+", "")      // Remove todos Unicode escapes
                                .replaceAll("\\\\[^ntrt\"\\\\]", "")        // Remove barras inv√°lidas
                                .replaceAll("\\s+", " ")                    // Normaliza espa√ßos novamente
                                .trim();
            }
            
            // Se ficou vazio ap√≥s limpeza, retorna null
            logger.info(String.format("üßπ Sa√≠da cleanAIThoughts: %s", 
                       cleaned.isEmpty() ? "EMPTY (retornando null)" : String.format("'%.100s...'", cleaned)));
            return cleaned.isEmpty() ? null : cleaned;
            
        } catch (Exception e) {
            logger.severe(String.format("‚ùå Erro em cleanAIThoughts: %s", e.getMessage()));
            e.printStackTrace();
            // Em caso de erro, retorna o texto original
            return translation;
        }
    }

    /**
     * Tradu√ß√£o r√°pida de emerg√™ncia com timeout muito baixo
     */
    private static String translateWithQuickFallback(String text, double duration) {
        Path tempFile = null;
        try {
            int maxChars = (int)(duration * CHARS_PER_SECOND_FAST * 0.7); // 70% para seguran√ßa m√°xima
            
            String quickPrompt = String.format(
                "Tradu√ß√£o PT-BR r√°pida (%d chars m√°x): %s\nApenas a tradu√ß√£o:",
                maxChars, text
            );
            
            String jsonPayload = String.format(
                "{\"model\":\"gemma3n:e4b\",\"messages\":[{\"role\":\"user\",\"content\":\"%s\"}],\"stream\":false,\"options\":{\"temperature\":0.0}}",
                escapeForJson(quickPrompt)
            );
            
            tempFile = Files.createTempFile("ollama_quick", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "--max-time 10 " + // Timeout no pr√≥prio curl
                "-d @%s",
                tempFile.toString()
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            // Timeout ainda mais agressivo para emerg√™ncia
            boolean finished = process.waitFor(12, TimeUnit.SECONDS);
            if (!finished) {
                logger.warning("‚è∞ Timeout na tradu√ß√£o de emerg√™ncia (12s)");
                process.destroyForcibly();
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                return null;
            }

            String responseStr = response.toString();
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", "")
                               .replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                               
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            return null;

        } catch (Exception e) {
            logger.warning("‚ùå Erro na tradu√ß√£o r√°pida: " + e.getMessage());
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora
            }
        }
    }

    /**
     * Determina timeout baseado no contexto para evitar travamentos
     */
    private static int getTimeoutForContext(String contextType) {
        return switch (contextType) {
            case "ultra_concise" -> 15; // Reduzido significativamente para evitar travamentos
            case "concise" -> 20;
            case "normal" -> 25;
            case "detailed" -> 30;
            default -> 20;
        };
    }
    
    /**
     * Constr√≥i prompt simplificado para ultra_concise para evitar travamentos
     */
    private static String buildSimplifiedPromptForUltraConcise(String text, double duration) {
        int maxChars = (int)(duration * CHARS_PER_SECOND_FAST * 0.8); // 80% da capacidade para seguran√ßa
        
        return String.format(
            "Traduza para portugu√™s brasileiro ULTRA CONCISO (m√°x %d chars, %.1fs): %s\n\n" +
            "REGRAS:\n" +
            "- Preserve termos t√©cnicos exatos\n" +
            "- Use contra√ß√µes: 'pra', 't√°', 'c√™'\n" +
            "- Remova palavras dispens√°veis\n" +
            "- Mantenha significado essencial\n" +
            "- Responda S√ì a tradu√ß√£o",
            maxChars, duration, text
        );
    }

    /**
     * Traduz com modelo e contexto espec√≠ficos
     */
    private static String translateWithOllamaAdvanced(String text, String model, String contextType, double duration) {
        Path tempFile = null;
        try {
            // Determina timeout baseado no contexto - ultra_concise precisa ser mais restritivo
            int timeoutSeconds = getTimeoutForContext(contextType);
            
            // Para ultra_concise, usa prompt simplificado para evitar travamento
            String prompt = contextType.equals("ultra_concise") ? 
                buildSimplifiedPromptForUltraConcise(text, duration) :
                buildContextualPrompt(contextType, duration) + "\n\nText to translate: " + text;
            
            logger.info(String.format("üìù Preparando tradu√ß√£o com modelo %s, contexto %s (timeout: %ds)", 
                model, contextType, timeoutSeconds));
            
            // Cria JSON payload
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"messages\":[{\"role\":\"user\",\"content\":\"%s\"}],\"stream\":false,\"options\":{\"temperature\":0.1}}",
                model, escapeForJson(prompt)
            );
            
            // Salva em arquivo tempor√°rio
            tempFile = Files.createTempFile("ollama_request", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            logger.info(String.format("üìÑ JSON salvo em: %s", tempFile.toString()));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            logger.info(String.format("üîó Executando: %s", curlCommand));

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            StringBuilder errorOutput = new StringBuilder();
            
            // L√™ stdout e stderr em paralelo para evitar bloqueio
            Thread outputReader = new Thread(() -> {
                try (BufferedReader reader = new BufferedReader(
                        new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                } catch (Exception e) {
                    logger.warning("Erro lendo stdout: " + e.getMessage());
                }
            });
            
            Thread errorReader = new Thread(() -> {
                try (BufferedReader reader = new BufferedReader(
                        new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        errorOutput.append(line);
                    }
                } catch (Exception e) {
                    logger.warning("Erro lendo stderr: " + e.getMessage());
                }
            });
            
            outputReader.start();
            errorReader.start();

            boolean finished = process.waitFor(timeoutSeconds, TimeUnit.SECONDS);
            if (!finished) {
                logger.warning(String.format("‚è∞ TIMEOUT na chamada curl (%ds) - contexto %s", timeoutSeconds, contextType));
                process.destroyForcibly();
                // Aguarda threads terminarem
                try {
                    outputReader.join(1000);
                    errorReader.join(1000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
                return null;
            }
            
            // Aguarda threads terminarem
            try {
                outputReader.join(2000);
                errorReader.join(2000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                logger.warning(String.format("‚ùå Curl falhou com exit code: %d", exitCode));
                if (errorOutput.length() > 0) {
                    logger.warning("Error output: " + errorOutput.toString());
                }
                return null;
            }

            // Parse da resposta JSON
            String responseStr = response.toString();
            logger.info(String.format("üì• Resposta Ollama (%d chars): %.200s...", 
                       responseStr.length(), responseStr));
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                logger.info(String.format("üîç Regex encontrou conte√∫do: %.100s...", content));
                
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // ORDEM CORRETA: escape duplo primeiro, depois simples
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                               
                logger.info(String.format("üîß Ap√≥s unescape: %.100s...", content));
                
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                logger.info(String.format("üßπ Ap√≥s limpeza: %s", content == null ? "NULL" : String.format("%.100s...", content)));
                               
                if (content != null && !content.isEmpty()) {
                    logger.info("‚úÖ Retornando tradu√ß√£o processada");
                    return content;
                } else {
                    logger.warning("‚ùå Conte√∫do vazio ap√≥s processamento");
                }
            } else {
                logger.warning("‚ùå Regex n√£o encontrou 'content' na resposta JSON");
            }

            return null;

        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora erros na limpeza
            }
        }
    }

    private static String translateWithOllama(String text) {
        Path tempFile = null;
        try {
            // Constr√≥i o prompt completo
            String fullPrompt = buildSystemPrompt() + "\n\nTexto para traduzir: " + text;
            
            // Cria JSON payload - usa gemma3n:e4b como padr√£o para m√©todo legado
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"prompt\":\"%s\",\"stream\":false,\"options\":{\"temperature\":0.1}}",
                "gemma3n:e4b", escapeForJson(fullPrompt)
            );
            
            // Salva em arquivo tempor√°rio para evitar problemas de escape
            tempFile = Files.createTempFile("ollama_request", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            logger.info("üîç Chamando Ollama...");

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            boolean finished = process.waitFor(15, TimeUnit.SECONDS); // Otimizado para velocidade
            if (!finished) {
                logger.warning("‚ùå Timeout no processo curl");
                process.destroyForcibly();
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                logger.warning("‚ùå Erro no processo curl (exit code: " + exitCode + ")");
                // Captura stderr para debug
                try (BufferedReader errorReader = new BufferedReader(
                        new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8))) {
                    String errorLine;
                    StringBuilder errorOutput = new StringBuilder();
                    while ((errorLine = errorReader.readLine()) != null) {
                        errorOutput.append(errorLine).append("\n");
                    }
                    if (errorOutput.length() > 0) {
                        logger.warning("Erro curl: " + errorOutput.toString());
                    }
                }
                return null;
            }

            // Parse simples da resposta JSON
            String responseStr = response.toString();
            logger.info("üì• Resposta Ollama: " + responseStr.substring(0, Math.min(200, responseStr.length())));
            
            // Buscar "response":"..."
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // Decodificar escape sequences - ORDEM CORRETA: escape duplo primeiro!
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            logger.warning("‚ùå N√£o foi poss√≠vel extrair tradu√ß√£o da resposta");
            return null;

        } catch (Exception e) {
            logger.severe("‚ùå Erro na tradu√ß√£o: " + e.getMessage());
            e.printStackTrace();
            return null;
        } finally {
            // Limpa arquivo tempor√°rio se existir
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora erros na limpeza
            }
        }
    }

    /**
     * FALLBACK ULTRA-CONCISO: usa prompt extremamente agressivo para caber no timing
     */
    private static String translateUltraConcise(SimpleVTTBlock block) {
        Path tempFile = null;
        try {
            // Prompt ULTRA AGRESSIVO para m√°xima concis√£o
            String ultraPrompt = String.format(
                "Traduza para portugu√™s EXTREMAMENTE CONCISO (m√°ximo %d caracteres, %.1fs). " +
                "Use s√≥ abrevia√ß√µes, g√≠rias, contra√ß√µes m√°ximas. Responda S√ì a tradu√ß√£o: %s",
                (int)block.maxCharsForTiming, block.duration, block.originalText
            );
            
            // Usa o modelo mais r√°pido dispon√≠vel
            String model = AVAILABLE_MODELS[0]; // qwen3:8b
            
            String jsonPayload = String.format(
                "{\"model\":\"%s\",\"prompt\":\"%s\",\"stream\":false,\"options\":{\"temperature\":0.0}}",
                model, escapeForJson(ultraPrompt)
            );
            
            tempFile = Files.createTempFile("ollama_ultra", ".json");
            Files.write(tempFile, jsonPayload.getBytes(StandardCharsets.UTF_8));
            
            String curlCommand = String.format(
                "curl -s -X POST http://localhost:11434/api/chat " +
                "-H \"Content-Type: application/json\" " +
                "-d @%s",
                tempFile.toString()
            );

            ProcessBuilder pb = new ProcessBuilder("bash", "-c", curlCommand);
            Process process = pb.start();

            StringBuilder response = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
            }

            boolean finished = process.waitFor(10, TimeUnit.SECONDS); // SUPER R√ÅPIDO
            if (!finished) {
                process.destroyForcibly();
                return null;
            }
            
            int exitCode = process.exitValue();
            if (exitCode != 0) {
                return null;
            }

            String responseStr = response.toString();
            Pattern responsePattern = Pattern.compile("\"content\":\\s*\"([^\"]*(?:\\\\.[^\"]*)*?)\"");
            Matcher matcher = responsePattern.matcher(responseStr);

            if (matcher.find()) {
                String content = matcher.group(1);
                // PR√â-LIMPEZA: Remove tokens Unicode antes do unescape
                content = content.replaceAll("\\\\u003[cC].*?\\\\u003[eE]", ""); // Remove tokens completos
                
                // ORDEM CORRETA: escape duplo primeiro, depois simples
                content = content.replace("\\\\", "\\")
                               .replace("\\\"", "\"")
                               .replace("\\n", "\n")
                               .replace("\\r", "\r")
                               .replace("\\t", "\t")
                               .trim();
                               
                // P√ìS-LIMPEZA: Remove tokens que surgiram ap√≥s unescape
                content = cleanAIThoughts(content);
                               
                if (content != null && !content.isEmpty()) {
                    return content;
                }
            }

            return null;

        } catch (Exception e) {
            return null;
        } finally {
            try {
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
            } catch (Exception e) {
                // Ignora
            }
        }
    }

    // M√©todos de compatibilidade
    public static void translateFileEnhanced(String inputFile, String outputFile, Object prosodyData) throws Exception {
        translateFile(inputFile, outputFile, "LLama");
    }

    public static void translateFileEnhanced(String inputFile, String outputFile) throws Exception {
        translateFile(inputFile, outputFile, "LLama");
    }

    public static void translateFileWithFallback(String inputFile, String outputFile) throws Exception {
        translateFile(inputFile, outputFile, "LLama");
    }

    // Main para teste direto
    public static void main(String[] args) {
        if (args.length >= 2) {
            try {
                translateFile(args[0], args[1], "LLama");
            } catch (Exception e) {
                System.err.println("Erro: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("Uso: java TranslationUtilsSimple <input.vtt> <output.vtt>");
        }
    }
}