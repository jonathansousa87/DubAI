package org;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.logging.Logger;

/**
 * SilencePipelineIntegration - Integra√ß√£o da preserva√ß√£o de sil√™ncios no pipeline principal
 * CORRIGIDO para usar as classes consolidadas
 */
public class SilencePipelineIntegration {

    private static final Logger LOGGER = Logger.getLogger(SilencePipelineIntegration.class.getName());

    /**
     * M√âTODO PRINCIPAL: Integra preserva√ß√£o de sil√™ncios no pipeline principal
     */
    public static void integrateWithMainPipeline(
            String originalVideoPath,
            String outputDirectory) throws IOException, InterruptedException {

        LOGGER.info("üîó INTEGRANDO PRESERVA√á√ÉO DE SIL√äNCIOS NO PIPELINE");

        try {
            // 1. Extrai √°udio do v√≠deo original (se ainda n√£o foi feito)
            Path originalAudioPath = ensureOriginalAudioExists(originalVideoPath, outputDirectory);

            // 2. Encontra os arquivos de √°udio processados
            List<Path> processedAudioFiles = findProcessedAudioSegments(outputDirectory);

            if (processedAudioFiles.isEmpty()) {
                LOGGER.warning("‚ö†Ô∏è Nenhum √°udio processado encontrado - usando fallback");
                createFallbackOutput(originalAudioPath, outputDirectory);
                return;
            }

            // 3. Aplica preserva√ß√£o de sil√™ncios usando SilenceUtils consolidado
            Path finalOutput = Paths.get(outputDirectory, "audio_with_preserved_silences.wav");
            SilenceUtils.preserveOriginalSilences(
                    originalAudioPath, processedAudioFiles, finalOutput);

            // 4. Move para o nome esperado pelo pipeline (dublado.wav)
            Path expectedOutput = Paths.get(outputDirectory, "dublado.wav");
            Files.move(finalOutput, expectedOutput, StandardCopyOption.REPLACE_EXISTING);

            LOGGER.info("‚úÖ Integra√ß√£o de sil√™ncios conclu√≠da: " + expectedOutput.getFileName());

        } catch (Exception e) {
            LOGGER.severe("‚ùå Erro na integra√ß√£o de sil√™ncios: " + e.getMessage());

            // Fallback: tenta usar m√©todo anterior do pipeline
            handleIntegrationFailure(originalVideoPath, outputDirectory, e);
        }
    }

    /**
     * M√âTODO ALTERNATIVO: Para integra√ß√£o com timing existente
     */
    public static void enhanceExistingTimingUtils(
            Path originalVideo,
            Path dubbedAudio,
            Path vttFile,
            Path outputAudio) throws IOException, InterruptedException {

        LOGGER.info("üîß MELHORANDO TIMING EXISTENTE COM PRESERVA√á√ÉO DE SIL√äNCIOS");

        try {
            // Extrai √°udio do v√≠deo original para an√°lise de sil√™ncios
            Path tempOriginalAudio = Files.createTempFile("original_for_silence_", ".wav");

            try {
                AudioUtils.extractAudio(originalVideo, tempOriginalAudio);

                // Detecta segmentos originais usando SilenceUtils
                List<SilenceUtils.SilenceSegment> originalSilences =
                        SilenceUtils.detectSilences(tempOriginalAudio);

                // Se temos VTT, combina as informa√ß√µes
                if (Files.exists(vttFile)) {
                    combineVTTWithSilenceAnalysis(vttFile, dubbedAudio, outputAudio);
                } else {
                    // Usa apenas an√°lise de sil√™ncios
                    applySilencePreservationOnly(tempOriginalAudio, dubbedAudio, outputAudio);
                }

            } finally {
                Files.deleteIfExists(tempOriginalAudio);
            }

        } catch (Exception e) {
            LOGGER.warning("‚ö†Ô∏è Erro na melhoria de timing, usando m√©todo original: " + e.getMessage());

            // Fallback para c√≥pia simples
            Files.copy(dubbedAudio, outputAudio, StandardCopyOption.REPLACE_EXISTING);
        }
    }

    /**
     * M√âTODO PARA SUBSTITUIR/MELHORAR TTSUtils
     */
    public static void enhanceTTSWithSilencePreservation(String vttFile, String outputDir)
            throws IOException, InterruptedException {

        LOGGER.info("üéôÔ∏è MELHORANDO TTS COM PRESERVA√á√ÉO DE SIL√äNCIOS");

        // Processa VTT normalmente primeiro
        TTSUtils.processVttFile(vttFile);

        // Verifica se temos √°udio original para an√°lise de sil√™ncios
        Path originalAudio = findOriginalAudioInDirectory(outputDir);

        if (originalAudio != null) {
            LOGGER.info("üìÇ √Åudio original encontrado, aplicando preserva√ß√£o de sil√™ncios");

            // Aplica preserva√ß√£o de sil√™ncios sobre o resultado do TTS
            Path ttsOutput = Paths.get(outputDir, "output.wav");

            if (Files.exists(ttsOutput)) {
                // Quebra o TTS output em segmentos baseados no VTT
                List<Path> ttsSegments = breakTTSIntoSegments(ttsOutput, vttFile, outputDir);

                // Reconstr√≥i com sil√™ncios preservados usando SilenceUtils
                Path finalOutput = Paths.get(outputDir, "output_with_silences.wav");
                SilenceUtils.preserveOriginalSilences(
                        originalAudio, ttsSegments, finalOutput);

                // Substitui o output original
                Files.move(finalOutput, ttsOutput, StandardCopyOption.REPLACE_EXISTING);

                LOGGER.info("‚úÖ TTS melhorado com preserva√ß√£o de sil√™ncios");
            }
        } else {
            LOGGER.info("‚ÑπÔ∏è √Åudio original n√£o encontrado, usando TTS padr√£o");
        }
    }

    // ===== M√âTODOS AUXILIARES =====

    /**
     * Garante que o √°udio original existe
     */
    private static Path ensureOriginalAudioExists(String videoPath, String outputDir)
            throws IOException, InterruptedException {

        Path audioPath = Paths.get(outputDir, "original_audio.wav");

        if (!Files.exists(audioPath)) {
            LOGGER.info("üîä Extraindo √°udio original do v√≠deo...");
            AudioUtils.extractAudio(Paths.get(videoPath), audioPath);
        }

        return audioPath;
    }

    /**
     * Encontra arquivos de √°udio processados no diret√≥rio
     */
    private static List<Path> findProcessedAudioSegments(String outputDir) throws IOException {
        Path directory = Paths.get(outputDir);

        LOGGER.info("üîç Procurando arquivos de √°udio processados em: " + outputDir);

        // Estrat√©gia 1: Procura por padr√£o audio_XXX.wav (TTSUtils)
        List<Path> audioFiles = Files.list(directory)
                .filter(path -> path.getFileName().toString().matches("audio_\\d{3}\\.wav"))
                .sorted()
                .toList();

        if (!audioFiles.isEmpty()) {
            LOGGER.info("‚úÖ Encontrados " + audioFiles.size() + " arquivos padr√£o TTSUtils");
            return audioFiles;
        }

        // Estrat√©gia 2: Procura por outros padr√µes comuns
        String[] patterns = {
                "segment_\\d+\\.wav",
                "processed_\\d+\\.wav",
                "speech_\\d+\\.wav",
                "vocal_\\d+\\.wav"
        };

        for (String pattern : patterns) {
            audioFiles = Files.list(directory)
                    .filter(path -> path.getFileName().toString().matches(pattern))
                    .sorted()
                    .toList();

            if (!audioFiles.isEmpty()) {
                LOGGER.info("‚úÖ Encontrados " + audioFiles.size() + " arquivos padr√£o: " + pattern);
                return audioFiles;
            }
        }

        // Estrat√©gia 3: Lista todos os .wav e permite escolha manual
        audioFiles = Files.list(directory)
                .filter(path -> path.toString().endsWith(".wav"))
                .filter(path -> !path.getFileName().toString().equals("original_audio.wav"))
                .filter(path -> !path.getFileName().toString().equals("audio.wav"))
                .filter(path -> !path.getFileName().toString().equals("vocals.wav"))
                .filter(path -> !path.getFileName().toString().equals("accompaniment.wav"))
                .sorted()
                .toList();

        if (!audioFiles.isEmpty()) {
            LOGGER.info("‚ö†Ô∏è Encontrados " + audioFiles.size() + " arquivos .wav gen√©ricos");

            // Log dos arquivos encontrados para debug
            audioFiles.forEach(file ->
                    LOGGER.info("  üìÑ " + file.getFileName()));
        }

        return audioFiles;
    }

    /**
     * Cria sa√≠da de fallback quando n√£o h√° √°udios processados
     */
    private static void createFallbackOutput(Path originalAudio, String outputDir)
            throws IOException, InterruptedException {

        LOGGER.warning("‚ö†Ô∏è Criando sa√≠da de fallback - copiando √°udio original");

        Path fallbackOutput = Paths.get(outputDir, "dublado.wav");
        Files.copy(originalAudio, fallbackOutput, StandardCopyOption.REPLACE_EXISTING);

        LOGGER.info("‚úÖ Fallback criado: " + fallbackOutput.getFileName());
    }

    /**
     * Trata falhas na integra√ß√£o
     */
    private static void handleIntegrationFailure(String originalVideoPath, String outputDir, Exception originalError)
            throws IOException, InterruptedException {

        LOGGER.warning("üîÑ Aplicando estrat√©gias de fallback...");

        try {
            // Fallback 1: Tenta usar VTTUtils se dispon√≠vel
            Path outputAudio = Paths.get(outputDir, "output.wav");
            Path vttFile = Paths.get(outputDir, "transcription.vtt");
            Path finalOutput = Paths.get(outputDir, "dublado.wav");

            if (Files.exists(outputAudio)) {
                if (Files.exists(vttFile)) {
                    LOGGER.info("üìÑ Tentando fallback com VTT...");
                    // Usar VTTUtils para sincroniza√ß√£o
                    VTTUtils.synchronizeWithVTT(vttFile.toString(), outputDir);
                } else {
                    LOGGER.info("üìÑ Tentando fallback simples...");
                    Files.copy(outputAudio, finalOutput, StandardCopyOption.REPLACE_EXISTING);
                }

                LOGGER.info("‚úÖ Fallback aplicado com sucesso");
                return;
            }

            // Fallback 2: Procura por qualquer √°udio no diret√≥rio
            List<Path> anyAudioFiles = Files.list(Paths.get(outputDir))
                    .filter(path -> path.toString().endsWith(".wav"))
                    .filter(path -> Files.exists(path))
                    .toList();

            if (!anyAudioFiles.isEmpty()) {
                Path bestCandidate = anyAudioFiles.stream()
                        .filter(path -> path.getFileName().toString().contains("output"))
                        .findFirst()
                        .orElse(anyAudioFiles.get(0));

                Files.copy(bestCandidate, Paths.get(outputDir, "dublado.wav"),
                        StandardCopyOption.REPLACE_EXISTING);

                LOGGER.info("‚úÖ Fallback final aplicado: " + bestCandidate.getFileName());
                return;
            }

        } catch (Exception fallbackError) {
            LOGGER.severe("‚ùå Todos os fallbacks falharam: " + fallbackError.getMessage());
        }

        // Se chegou aqui, relan√ßa o erro original
        throw new RuntimeException("Falha na integra√ß√£o de sil√™ncios e todos os fallbacks", originalError);
    }

    /**
     * Combina informa√ß√µes do VTT com an√°lise de sil√™ncios
     */
    private static void combineVTTWithSilenceAnalysis(
            Path vttFile,
            Path dubbedAudio,
            Path outputAudio) throws IOException, InterruptedException {

        LOGGER.info("üîó Combinando VTT com an√°lise de sil√™ncios...");

        try {
            // Tenta usar VTTUtils primeiro
            VTTUtils.synchronizeWithVTT(vttFile.toString(), dubbedAudio.getParent().toString());

            // Se sucesso, move o resultado
            Path syncedOutput = dubbedAudio.getParent().resolve("vtt_synchronized.wav");
            if (Files.exists(syncedOutput)) {
                Files.move(syncedOutput, outputAudio, StandardCopyOption.REPLACE_EXISTING);
                LOGGER.info("‚úÖ VTT sync aplicado com sucesso");
                return;
            }
        } catch (Exception e) {
            LOGGER.warning("‚ö†Ô∏è VTT sync falhou, usando apenas an√°lise de sil√™ncios: " + e.getMessage());
        }

        // Fallback: usa apenas preserva√ß√£o de sil√™ncios
        applySilencePreservationOnly(
                dubbedAudio.getParent().resolve("original_audio.wav"),
                dubbedAudio,
                outputAudio);
    }

    /**
     * Aplica apenas preserva√ß√£o de sil√™ncios (sem VTT)
     */
    private static void applySilencePreservationOnly(Path originalAudio, Path dubbedAudio, Path outputAudio)
            throws IOException, InterruptedException {

        LOGGER.info("üîá Aplicando apenas preserva√ß√£o de sil√™ncios...");

        // Para simplificar, usamos apenas o √°udio dublado como um √∫nico segmento
        List<Path> dubbedSegments = List.of(dubbedAudio);

        SilenceUtils.preserveOriginalSilences(originalAudio, dubbedSegments, outputAudio);
    }

    /**
     * Encontra √°udio original no diret√≥rio
     */
    private static Path findOriginalAudioInDirectory(String outputDir) {
        String[] possibleNames = {
                "original_audio.wav",
                "audio.wav",
                "extracted_audio.wav",
                "source_audio.wav"
        };

        for (String name : possibleNames) {
            Path candidate = Paths.get(outputDir, name);
            if (Files.exists(candidate)) {
                LOGGER.info("üìÇ √Åudio original encontrado: " + name);
                return candidate;
            }
        }

        return null;
    }

    /**
     * Quebra output do TTS em segmentos baseados no VTT
     */
    private static List<Path> breakTTSIntoSegments(Path ttsOutput, String vttFile, String outputDir)
            throws IOException, InterruptedException {

        LOGGER.info("‚úÇÔ∏è Quebrando TTS em segmentos baseados no VTT...");

        // Por enquanto, retorna apenas o arquivo inteiro
        // Em implementa√ß√£o futura, pode quebrar baseado nos timestamps do VTT
        return List.of(ttsOutput);
    }

    // ===== M√âTODOS DE INTEGRA√á√ÉO ESPEC√çFICOS =====

    /**
     * INTEGRA√á√ÉO ESPEC√çFICA PARA Main.java
     */
    public static void replaceMainFinalizationStep(Path videoFile, String outputDir, boolean useAdvancedProcessing)
            throws IOException, InterruptedException {

        LOGGER.info("üé¨ FINALIZA√á√ÉO MELHORADA COM PRESERVA√á√ÉO DE SIL√äNCIOS");

        try {
            // Aplica integra√ß√£o de sil√™ncios
            integrateWithMainPipeline(videoFile.toString(), outputDir);

            // Continua com cria√ß√£o do v√≠deo final
            Path dubAudioPath = Paths.get(outputDir, "dublado.wav");
            Path outputVideoPath = Paths.get(videoFile.toString().replace(".mp4", "_dub_silences_preserved.mp4"));

            if (Files.exists(dubAudioPath)) {
                if (useAdvancedProcessing) {
                    AudioUtils.replaceAudioAdvanced(videoFile, dubAudioPath, outputVideoPath);
                } else {
                    AudioUtils.replaceAudio(videoFile, dubAudioPath, outputVideoPath);
                }

                LOGGER.info("üé¨ V√≠deo final criado com sil√™ncios preservados: " + outputVideoPath.getFileName());
            } else {
                throw new IOException("√Åudio dublado n√£o foi gerado: " + dubAudioPath);
            }

        } catch (Exception e) {
            LOGGER.severe("‚ùå Erro na finaliza√ß√£o melhorada: " + e.getMessage());
            throw e;
        }
    }

    /**
     * INTEGRA√á√ÉO ESPEC√çFICA PARA aplica√ß√£o de mapa de sil√™ncios
     */
    public static void replaceApplySilenceMap(Path dubbedAudio, Path outputAudio)
            throws IOException, InterruptedException {

        LOGGER.info("üîÑ APLICANDO MAPA DE SIL√äNCIOS MELHORADO");

        // Procura por √°udio original no mesmo diret√≥rio
        Path originalAudio = findOriginalAudioInDirectory(dubbedAudio.getParent().toString());

        if (originalAudio != null) {
            // Usa preserva√ß√£o de sil√™ncios completa
            List<Path> segments = List.of(dubbedAudio);
            SilenceUtils.preserveOriginalSilences(originalAudio, segments, outputAudio);
        } else {
            LOGGER.warning("‚ö†Ô∏è √Åudio original n√£o encontrado, copiando √°udio dublado");
            Files.copy(dubbedAudio, outputAudio, StandardCopyOption.REPLACE_EXISTING);
        }
    }

    // ===== M√âTODOS DE TESTE E DEBUG =====

    /**
     * M√©todo de teste independente
     */
    public static void testIntegration(String videoPath, String outputDir) {
        try {
            LOGGER.info("üß™ TESTANDO INTEGRA√á√ÉO DE PRESERVA√á√ÉO DE SIL√äNCIOS");

            integrateWithMainPipeline(videoPath, outputDir);

            LOGGER.info("‚úÖ Teste de integra√ß√£o conclu√≠do com sucesso");

        } catch (Exception e) {
            LOGGER.severe("‚ùå Teste de integra√ß√£o falhou: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Debug de arquivos no diret√≥rio
     */
    public static void debugDirectoryContents(String outputDir) {
        try {
            LOGGER.info("üîç DEBUG - Conte√∫do do diret√≥rio: " + outputDir);

            Files.list(Paths.get(outputDir))
                    .forEach(path -> {
                        try {
                            long size = Files.size(path);
                            LOGGER.info(String.format("  üìÑ %s (%.1f KB)",
                                    path.getFileName(), size / 1024.0));
                        } catch (IOException e) {
                            LOGGER.info("  üìÑ " + path.getFileName() + " (erro obtendo tamanho)");
                        }
                    });

        } catch (IOException e) {
            LOGGER.warning("‚ùå Erro no debug do diret√≥rio: " + e.getMessage());
        }
    }

    /**
     * Valida se a integra√ß√£o pode ser aplicada
     */
    public static boolean canApplyIntegration(String outputDir) {
        try {
            List<Path> audioFiles = findProcessedAudioSegments(outputDir);
            Path originalAudio = findOriginalAudioInDirectory(outputDir);

            boolean hasProcessedAudio = !audioFiles.isEmpty();
            boolean hasOriginalAudio = originalAudio != null;

            LOGGER.info("üîç VALIDA√á√ÉO DE INTEGRA√á√ÉO:");
            LOGGER.info("  √Åudios processados: " + (hasProcessedAudio ? "‚úÖ " + audioFiles.size() : "‚ùå Nenhum"));
            LOGGER.info("  √Åudio original: " + (hasOriginalAudio ? "‚úÖ " + originalAudio.getFileName() : "‚ùå N√£o encontrado"));

            return hasProcessedAudio || hasOriginalAudio;

        } catch (Exception e) {
            LOGGER.warning("‚ö†Ô∏è Erro na valida√ß√£o: " + e.getMessage());
            return false;
        }
    }

    /**
     * Shutdown graceful
     */
    public static void shutdown() {
        LOGGER.info("üîÑ Finalizando SilencePipelineIntegration...");
        // Removido: AudioSilencePreservationUtils.shutdown(); (classe consolidada)
        SilenceUtils.shutdown();
        LOGGER.info("‚úÖ SilencePipelineIntegration finalizado");
    }
}